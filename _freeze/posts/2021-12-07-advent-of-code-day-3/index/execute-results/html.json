{
  "hash": "45445c42816907136fcb056d1ed7653e",
  "result": {
    "markdown": "---\ntitle: Advent of Code 2021\nauthor: Liam D. Bailey\ndate: '2021-12-05'\ndescription: \"Day 3\"\ncategories: [R]\nimage: \"feature.png\"\n---\n\n\n\n\n</br>\n\n## The Data\n\n---\n\nSee the explanation for today's challenge [here](https://adventofcode.com/2021/day/3). This time we need to work with binary numbers.\n\n![](https://i.gifer.com/K99U.gif \"Finally, robotic beings rule the world!\")\n\nWe're given a vector of numbers written in binary (e.g. 00100, 11110) and we need to use these to extract two values. It's not as simple as just converting binary to decimal, we need to first generate new binary numbers that represent the most and least frequent value in each column. Let's read the data in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\n#Read in data where each binary number is a character string\nday3_data <- readr::read_delim(file = \"./data/Day3.txt\", delim = \"/t\",\n                               col_names = \"binary\", show_col_types = FALSE)\n\nhead(day3_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  binary      \n  <chr>       \n1 000010000011\n2 001010000111\n3 011010000010\n4 000011111110\n5 101101000101\n6 000100010100\n```\n:::\n:::\n\n\n</br>\n\n## The Challenges\n\n---\n\n### Challenge 1\n\n---\n\nTo find the most and least common value in each column we first need to separate the character strings so that each binary bit is a separate column. We can do this using `separate()` in `tidyr` (and a bit of regex).\n\nMy first thought was just to use `separate()` where the separator is an empty string (\"\"), but when we try this we end up with an erroneous empty column at the start.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nbinary_length <- nchar(day3_data$binary[1])\n\nday3_data %>%\n  separate(col = binary, into = as.character(1:binary_length), sep = \"\") %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`   `10`  `11`  `12` \n  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 \"\"    0     0     0     0     1     0     0     0     0     0     1    \n2 \"\"    0     0     1     0     1     0     0     0     0     1     1    \n3 \"\"    0     1     1     0     1     0     0     0     0     0     1    \n4 \"\"    0     0     0     0     1     1     1     1     1     1     1    \n5 \"\"    1     0     1     1     0     1     0     0     0     1     0    \n6 \"\"    0     0     0     1     0     0     0     1     0     1     0    \n```\n:::\n:::\n\n\nInstead, we can use regex to specify that we only want to separate by blank spaces that were preceded by a number. We can do this using the regex lookbehind operation `(?<=)`. In our example, by adding `(?<=[0-1])` we are specifying that a separator must have a number 0 or 1 preceding it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparated_binary <- day3_data %>%\n  #Use convert = TRUE to automatically coerce to numeric\n  tidyr::separate(col = binary, into = as.character(1:binary_length), sep = \"(?<=[0-1])\", convert = TRUE)\n\nhead(separated_binary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n    `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`  `10`  `11`  `12`\n  <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n1     0     0     0     0     1     0     0     0     0     0     1     1\n2     0     0     1     0     1     0     0     0     0     1     1     1\n3     0     1     1     0     1     0     0     0     0     0     1     0\n4     0     0     0     0     1     1     1     1     1     1     1     0\n5     1     0     1     1     0     1     0     0     0     1     0     1\n6     0     0     0     1     0     0     0     1     0     1     0     0\n```\n:::\n:::\n\n\nNow identifying the most or least common value is easy. If the sum of the column is greater than the number of rows, 1 is most common and visa-versa. Below we return TRUE if 1 is most common or FALSE when 0 is most common, which directly corresponds to 1 and 0 respectively when converted to an integer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Is 1 most common?\nmost_common <- separated_binary %>%\n  #Return sum of each col\n  #If it's greater than half nrow() then 1 is most common (and the inverse is true)\n  summarise(across(.cols = everything(), .fns = ~sum(.) > (n()/2)))\n\nas.integer(most_common)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 0 1 1 1 1 0 0 1 1 1 0\n```\n:::\n:::\n\n\nAs a final step, we can use the `strtoi()` function to convert from binary to decimal. This function requires a single string input, so we need to convert our vector of most/least common numbers to a single character string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(most_common_binary <- paste(as.integer(most_common), collapse = \"\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"101111001110\"\n```\n:::\n\n```{.r .cell-code}\n(least_common_binary <- paste(as.integer(!most_common), collapse = \"\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"010000110001\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Convert each number to decimal\n(most_common_decimal    <- strtoi(most_common_binary, base = 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3022\n```\n:::\n\n```{.r .cell-code}\n(least_common_decimal  <- strtoi(least_common_binary, base = 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1073\n```\n:::\n:::\n\n\nOur answer is the product of these two numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_common_decimal * least_common_decimal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3242606\n```\n:::\n:::\n\n\n### Challenge 2\n\n---\n  \nThe second challenge is just a slightly more complex version of challenge 1, so I'm going to skip the explanation for now. If you're interested, you can see the code [on GitHub](https://github.com/LiamDBailey/AdventOfCode2021/blob/main/script/Day3.R).\n\n---\n\n</br>\n\nSee previous solutions here:\n\n- [Day 1](https://www.liamdbailey.com/post/advent-of-code-2021/)\n- [Day 2](https://www.liamdbailey.com/post/advent-of-code-day-2/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}