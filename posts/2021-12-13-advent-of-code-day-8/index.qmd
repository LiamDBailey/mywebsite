---
title: Advent of Code 2021
author: Liam D. Bailey
date: '2021-12-13'
description: "Day 8"
categories: [R]
image: "feature.jpg"
---

```{r, include=FALSE, message=FALSE}

library(dplyr)
library(ggplot2)
library(extrafont)
options(scipen = 200)

```

</br>

## The Data

---

![](https://media.giphy.com/media/83rxg99t45OoM/giphy.gif)

Day 8 is really more a puzzle than a coding challenge. We're given the inputs and outputs from a broken 7-segment display (like on a digital clock). We can imagine each segment of the clock as having a corresponding letter, from **a** (top) to **g** (bottom).

![](./img/numbers.png)

We can create a dictionary that will translate a string of letters into a corresponding number following the image above.

```{r}

#Actual letter number combos
correct_codes <- 0:9
names(correct_codes) <- c("abcefg", "cf", "acdeg", "acdfg", "bcdf", "abdfg", "abdefg", "acf", "abcdefg", "abcdfg")

```

The only problem is that the data we are given doesn't have the correct letters! Each row of the input data we are given includes all 10 possible numbers (0-9) but the letters used are wrong. We have to work out a number of rules to decode this information! See the full explanation for today's challenge [here](https://adventofcode.com/2021/day/8).

```{r}

#Load data
day8_data <- readr::read_delim(file = "./data/Day8.txt", delim = " | ",
                               col_names = c("inputs", "outputs"), show_col_types = FALSE)

head(day8_data)

```

Convert our data into nested lists so that it's easier to work with.

```{r}

day8_data <- day8_data %>% 
  mutate(inputs = stringr::str_split(inputs, pattern = " "),
         outputs = stringr::str_split(outputs, pattern = " "))

```

</br>

## The Challenges

---

### Challenge 1 & 2

In combination, the two challenges from Day 8 aim to decode the outputs so we'll combine them together. The first rules we can use are simple. There are 4 numbers that can be easily identified just by the number of characters in the input.

- 2 characters = 1
- 3 characters = 7
- 4 characters = 4
- 7 characters = 8

So if we see an input 'ab' this must correspond to the number 1 or 'cf' when correctly translated to the 7-segment display. But we don't know if 'a' is 'c' or 'f'. We need some more rules to work this out. We'll apply all these rules below:

```{r}

numbers <- NULL
for (i in 1:nrow(day8_data)) {

  #Split input into list with individual letters
  split_input  <- stringr::str_extract_all(day8_data$inputs[[i]], pattern = "[a-z]{1}")
  split_output <- stringr::str_extract_all(day8_data$outputs[[i]], pattern = "[a-z]{1}")

  #If there are two values, it must correspond to c and f
  #Remove from the list afterwards
  number1 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 2))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 2))] <- NULL

  #If there are three values, it must correspond to a, c and f
  #Remove from the list afterwards
  number7 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 3))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 3))] <- NULL

  #If there are four values, it must correspond to b, c, d and f
  #Remove from the list afterwards
  number4 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 4))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 4))] <- NULL

  #If there are seven values, it must correspond to a-g
  #Remove from the list afterwards
  number8 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 7))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 7))] <- NULL

  #Letter that's not shared between 1 and 7 must be a
  a <- setdiff(number7, number1)

  #Value of 6 characters that contains the letters in 4 must be 9.
  #Remove from the list afterwards
  number9 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 6 & all(number4 %in% letters)))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 6 & all(number4 %in% letters)))] <- NULL
  
  #The missing letter in 9 is e
  e <- setdiff(number8, number9)

  #Remaining 6 letter character that includes the same letters as number1 must be 0.
  #Remove from the list afterwards
  number0 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 6 & all(number1 %in% letters)))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 6 & all(number1 %in% letters)))] <- NULL
  
  #The missing value here is d
  d <- setdiff(number8, number0)

  #Last remaining length 6 is 6
  number6 <- split_input[unlist(lapply(split_input, \(letters) length(letters) == 6))][[1]]
  split_input[unlist(lapply(split_input, \(letters) length(letters) == 6))] <- NULL
  
  #Missing value is c
  c <- setdiff(number8, number6)

  #The letter in 7 that wasn't just extracted is f
  f <- setdiff(number1, c)

  #Letter in 4 that hasn't yet been deciphered in b
  b <- setdiff(number4, c(c, d, f))

  #Remaining letter in 0 after removing all known ones is g
  g <- setdiff(number0, c(a, b, c, e, f))

  #Dictionary
  dict <- letters[1:7]
  names(dict) <- c(a, b, c, d, e, f, g)

  #Now we can decode our output
  output <- correct_codes[unlist(lapply(split_output, \(letters) paste(dict[letters][order(dict[letters])], collapse = "")))]

  #Paste all the decoded numbers together
  numbers <- append(numbers, as.integer(paste(output, collapse = "")))

}

```

```{r}

numbers

```

The answer of our final challenge is the sum of all these values.

```{r}

sum(numbers)

```

---

</br>

See previous solutions here:

- [Day 1](https://www.liamdbailey.com/post/advent-of-code-2021/)
- [Day 2](https://www.liamdbailey.com/post/advent-of-code-day-2/)
- [Day 3](https://www.liamdbailey.com/post/advent-of-code-day-3/)
- [Day 4](https://www.liamdbailey.com/post/advent-of-code-day-4/)
- [Day 5](https://www.liamdbailey.com/post/advent-of-code-day-5/)
- [Day 6](https://www.liamdbailey.com/post/advent-of-code-day-6/)
- [Day 7](https://www.liamdbailey.com/post/advent-of-code-day-7/)
