---
title: "TEST"
output:
  html_document:
    code_folding: show
author: Liam D. Bailey
date: '2025-03-23'
description: "BLOG"
categories: [R, Data viz, GIS]
image: "feature.png"
---

## Introduction

HERE IS INTRODUCTION TEXT!

## Scrolly part!

```{=html}
<script src="https://unpkg.com/intersection-observer@0.5.1/intersection-observer.js"></script>
<script src="https://unpkg.com/scrollama"></script>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script>

// Define constants
const width = 400;
const height = 400;
const margin = {top: 50, right: 50, bottom: 50, left: 50};

// Try creating the HTML content myself
var new_section = d3.select("#scrolly-part")
    .append("section")
    .attr("id", "scrolly");
var new_article = new_section.append("article")

// First div
new_article.append("div")
    .attr("class", "step is-active")
    .attr("data-step", "1")
    .attr("data-url", "img/test.svg")
    .append("p")
    .text("What is the relationship between petal length and sepal length in iris flowers? Should these two be related? On face value, there appears to be a strong positive correlation: Flowers with higher sepal length have higher petal length.");
    
// Second div
new_article.append("div")
    .attr("class", "step")
    .attr("data-step", "2")
    .attr("data-url", "img/test2.svg")
    .append("p")
    .text("However, are we seeing a relationship between these flower characteristics? Or is there some other missing information in the data that we are not properly accounting for?");
    
// Third div
new_article.append("div")
    .attr("class", "step")
    .attr("data-step", "3")
    .attr("data-url", "img/test3.svg")
    .append("p")
    .text("In fact, we can see that our data consistent of three species with different flowers! Within each species, we see very little relationship between sepal and petal length.");

// Create the scrolly architecture
<!-- new_section.append("div") -->
<!--     .attr("class", "sticky-thing") -->
<!--     .append("img") -->
<!--     .attr("src", "img/test.svg") -->
<!--     .attr("class", "sticky-image") -->

new_section.append("div")
    .attr("class", "sticky-thing")
    // Create SVG element for D3 object in place of image
    .append("svg")
    .attr("class", "sticky-D3")
    .attr("width", width)
    .attr("height", height)

// SCROLLY
// using d3 for convenience

// Select the object with class #scrolly
var scrolly = d3.select("#scrolly");

// Identify within this #scrolly object the sticky-thing and article
var sticky = scrolly.select(".sticky-thing");
var article = scrolly.select("article");

// Identify all the step objects inside the article
var steps = article.selectAll(".step");

// Also find the svg container for D3 graph
var svg = d3.select("svg")

// Create D3 graph default
d3.csv("iris.csv").then(data => {

  const x = d3.scaleLinear()
    .domain(d3.extent(data, d => +d.X))
    .range([margin.left, width - margin.right]);

  const y = d3.scaleLinear()
    .domain(d3.extent(data, d => +d.Y))
    .range([height - margin.bottom, margin.top]);
  
  // Create colour scale for species
  const fill = d3.scaleOrdinal()
    .domain(d3.map(data, d => d.Species))
    .range(d3.schemeCategory10);
    
  // Calculate means for each species
  const speciesMeans = d3.rollup(data,
        values => ({
            x: d3.mean(values, d => +d.X),
            y: d3.mean(values, d => +d.Y)
        }),
        d => d.Species
    )
    
  svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x));

  svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y));
    
  // Add axis labels
  svg.append("text")
    .attr("x", width/2)
    .attr("y", height - margin.bottom/3)
    .attr("text-anchor", "middle")
    .attr("font-size", "12px")
    .text("Sepal Length (mm)");

  svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x", -height/2)
    .attr("y", margin.left/3)
    .attr("text-anchor", "middle")
    .attr("font-size", "12px")
    .text("Petal Length (mm)");

  svg.selectAll("circle")
    .data(data)
    .join("circle")
    .attr("cx", d => x(+d.X))
    .attr("cy", d => y(+d.Y))
    .attr("r", 3)
    //.attr("fill", d => fill(d.Species));
    
  svg.selectAll(".species-label")
    .data(speciesMeans)
    .join("text")
    .attr("class", "species-label")
    .attr("x", d => x(d[1].x))
    .attr("y", d => y(d[1].y))
    .text(d => d[0])
    .attr("text-anchor", "middle")
    .attr("font-size", "15px")
    .attr("font-weight", "bold")
    .attr("opacity", 0);
  
})

// initialize the scrollama
var scroller = scrollama();

// scrollama event handlers
function handleStepEnter(response) {

// response = { element, direction, index }

// Extract separately the individual element
// and the nested data
var el = d3.select(response.element);
var el_data = response.element.dataset

// remove is-active from all steps
// then add is-active to this step
steps.classed("is-active", false)
el.classed("is-active", true)

// update graphic based on step
sticky.select("img")
  .attr("src", el_data.url);
  
if (el_data.step === "1"){
  svg.selectAll("circle")
          .transition()
          .duration(1000)
          .attr("fill", "black")
    
} else if (el_data.step === "2"){

  d3.selectAll(".species-label")
    .transition()
    .duration(1000)
    .attr("opacity", 0)

  d3.csv("iris.csv").then(data => {
    
  const fill = d3.scaleOrdinal()
    .domain(d3.map(data, d => d.Species))
    .range(d3.schemeCategory10);

  svg.selectAll("circle")
    .transition()
    .duration(1000)
    .attr("fill", d => fill(d.Species));
})
} else if (el_data.step === "3"){
  
  d3.selectAll(".species-label")
    .transition()
    .duration(1000)
    .attr("opacity", 1)
  
}

}

function init() {
scroller
.setup({
step: "#scrolly article .step",
offset: 0.75,
// Set this to true if we want to see where the scroller is
debug: false
})
.onStepEnter(handleStepEnter);

// setup resize event
window.addEventListener("resize", scroller.resize);
}

// kick things off
init();
</script>
```